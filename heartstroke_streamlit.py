# # -*- coding: utf-8 -*-
# """HeartStroke_Streamlit.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1BBbTpBhLc6h5PTrwRdyBVEk1GAG4dPJr
# """


import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
import plotly.express as px

# Load the model
# model = joblib.load('xgboost_model.pkl')  # Replace with the path to your pickled model

# # Mapping of user-friendly feature names to model feature names
# feature_name_mapping = {
#     'Gender (0: Female, 1: Male)': 'gender',
#     'Age': 'age',
#     'Hypertension (0: No, 1: Yes)': 'hypertension',
#     'Heart Disease (0: No, 1: Yes)': 'heart_disease',
#     'Ever Married (0: No, 1: Yes)': 'ever_married',
#     'Work Type (0-4)': 'work_type',
#     'Residence Type (0: Rural, 1: Urban)': 'Residence_type',
#     'Average Glucose Level': 'avg_glucose_level',
#     'BMI': 'bmi',
#     'Smoking Status (0-3)': 'smoking_status'
# }

# # Function to predict stroke status and probabilities
# def predict_stroke(features):
#     prediction = model.predict(features)
#     probability = model.predict_proba(features)
#     return prediction[0], probability[0]  # Return both prediction and probability

# # Function to create features dataframe
# def create_features(user_inputs):
#     features = pd.DataFrame([user_inputs])
#     return features

# # Function to plot feature importance
# def plot_feature_importance(model, df):
#     importances = model.feature_importances_
#     indices = np.argsort(importances)[::-1]
#     fig, ax = plt.subplots(figsize=(10, 6))
#     sns.barplot(x=importances[indices], y=df.columns[indices], palette='viridis', ax=ax)
#     plt.title('Feature Importances')
#     plt.xlabel('Relative Importance')
#     plt.ylabel('Features')
#     plt.xticks(rotation=45)
#     st.pyplot(fig)

# # Function to plot probability bar chart using Plotly
# def plot_probability_chart(probability):
#     data = pd.DataFrame({
#         'Category': ['No Stroke', 'Stroke'],
#         'Probability': probability
#     })
#     fig = px.bar(data, x='Category', y='Probability', title="Probability of Stroke",
#                  labels={'Probability': 'Probability', 'Category': 'Status'},
#                  color='Category', color_discrete_map={'No Stroke': 'blue', 'Stroke': 'red'})
#     st.plotly_chart(fig)

# # Custom Streamlit configuration
# st.set_page_config(page_title='Heart Stroke Prediction', layout='wide')
# st.markdown("""
# <style>
#     .big-font {
#         font-size:300% !important;
#     }
# </style>
# """, unsafe_allow_html=True)

# # Streamlit UI
# st.title('Heart Stroke Prediction', anchor=None)

# # Sidebar with user input features
# st.sidebar.title('User Input Features')
# user_inputs = {}

# # Define the ranges and tooltip text for each feature
# feature_info = {
#     'Gender (0: Female, 1: Male)': ((0, 1), 'Gender of the individual'),
#     'Age': ((0.08, 82.0), 'Age of the individual (0.08 - 82)'),
#     'Hypertension (0: No, 1: Yes)': ((0, 1), 'Hypertension status (0: No, 1: Yes)'),
#     'Heart Disease (0: No, 1: Yes)': ((0, 1), 'Heart disease status (0: No, 1: Yes)'),
#     'Ever Married (0: No, 1: Yes)': ((0, 1), 'Marital status (0: No, 1: Yes)'),
#     'Work Type (0-4)': ((0, 4), 'Work type (e.g., 0: Children, 4: Private work)'),
#     'Residence Type (0: Rural, 1: Urban)': ((0, 1), 'Residence type (0: Rural, 1: Urban)'),
#     'Average Glucose Level': ((55.12, 168.15), 'Average glucose level (55.12 - 168.15)'),
#     'BMI': ((10.3, 97.6), 'Body Mass Index (10.3 - 97.6)'),
#     'Smoking Status (0-3)': ((0, 3), 'Smoking status (e.g., 0: Never smoked, 3: Smokes)')
# }

# # Create input fields for each feature with tooltip text
# for feature, ((min_val, max_val), tooltip) in feature_info.items():
#     step_val = 1 if isinstance(min_val, int) and isinstance(max_val, int) else 0.01
#     user_inputs[feature] = st.sidebar.number_input(f'Enter {feature}', min_value=min_val, max_value=max_val, value=min_val, step=step_val, help=tooltip)

# # Button to predict stroke status
# if st.sidebar.button('Predict Stroke Status'):
#     # Create features dataframe
#     features = create_features(user_inputs)
#     # Rename columns to match model feature names
#     features.rename(columns=feature_name_mapping, inplace=True)
#     # Predict using the model
#     result, probability = predict_stroke(features)
#     status = 'at risk of stroke' if result == 1 else 'not at risk of stroke'
#     if result == 1:
#         st.sidebar.error(f'This individual is {status}!', icon="⚠️")
#     else:
#         st.sidebar.success(f'This individual is {status}!', icon="✅")
#     st.sidebar.write(f"Probability of no stroke: {probability[0]:.2f}")
#     st.sidebar.write(f"Probability of stroke: {probability[1]:.2f}")

# # Option to display the probability bar chart
# show_graphs = st.checkbox('Show Graphs')

# # Generate graphs if the checkbox is checked
# if show_graphs:
#     st.header('Graphs')
#     features = create_features(user_inputs)  # Create features dataframe here
#     # Rename columns to match model feature names
#     features.rename(columns=feature_name_mapping, inplace=True)
#     # Plot feature importance
#     st.subheader('Feature Importance')
#     plot_feature_importance(model, features)
#     # Plot probability chart
#     st.subheader('Probability Chart')
#     _, probability = predict_stroke(features)
#     plot_probability_chart(probability)

# # Additional feature information section
# with st.expander("Learn more about heart stroke features"):
#     st.write("""
#     Here you can find more information about the features used to predict heart strokes:
#     - **Gender:** Indicates whether the individual is male or female.
#     - **Age:** Age of the individual in years.
#     - **Hypertension:** Presence of high blood pressure (0: No, 1: Yes).
#     - **Heart Disease:** Indicates the presence of heart disease (0: No, 1: Yes).
#     - **Ever Married:** Indicates marital status (0: No, 1: Yes).
#     - **Work Type:** Type of work (e.g., children, private, government).
#     - **Residence Type:** Type of residence (Rural or Urban).
#     - **Average Glucose Level:** Average blood glucose level in mg/dL.
#     - **BMI:** Body Mass Index, a measure of body fat.
#     - **Smoking Status:** Indicates smoking behavior (e.g., never smoked, smokes).
#     """)

# # Ensure the web app is mobile-responsive
# st.markdown("""
# <style>
#     @media (max-width: 768px) {
#         .sidebar .sidebar-content {
#             padding: 0 !important;
#         }
#     }
# </style>
# """, unsafe_allow_html=True) WORKING CODE 



import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Load the model
model = joblib.load('xgboost_model.pkl')  # Replace with the path to your pickled model

# Mapping of user-friendly feature names to model feature names
feature_name_mapping = {
    'Gender (0: Female, 1: Male)': 'gender',
    'Age': 'age',
    'Hypertension (0: No, 1: Yes)': 'hypertension',
    'Heart Disease (0: No, 1: Yes)': 'heart_disease',
    'Ever Married (0: No, 1: Yes)': 'ever_married',
    'Work Type (0-4)': 'work_type',
    'Residence Type (0: Rural, 1: Urban)': 'Residence_type',
    'Average Glucose Level': 'avg_glucose_level',
    'BMI': 'bmi',
    'Smoking Status (0-3)': 'smoking_status'
}

# Function to predict stroke status and probabilities
def predict_stroke(features):
    prediction = model.predict(features)
    probability = model.predict_proba(features)
    return prediction[0], probability[0]  # Return both prediction and probability

# Function to create features dataframe
def create_features(user_inputs):
    features = pd.DataFrame([user_inputs])
    return features

# Function to plot feature importance
def plot_feature_importance(model, df):
    importances = model.feature_importances_
    indices = importances.argsort()[::-1]
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(x=importances[indices], y=df.columns[indices], palette='viridis', ax=ax)
    plt.title('Feature Importances')
    plt.xlabel('Relative Importance')
    plt.ylabel('Features')
    plt.xticks(rotation=45)
    st.pyplot(fig)

# Function to plot probability bar chart using Plotly
def plot_probability_chart(probability):
    data = pd.DataFrame({
        'Category': ['No Stroke', 'Stroke'],
        'Probability': probability
    })
    fig = px.bar(data, x='Category', y='Probability', title="Probability of Stroke",
                 labels={'Probability': 'Probability', 'Category': 'Status'},
                 color='Category', color_discrete_map={'No Stroke': 'blue', 'Stroke': 'red'})
    st.plotly_chart(fig)

# Custom Streamlit configuration
st.set_page_config(page_title='Heart Stroke Prediction', layout='wide')
st.title('Heart Stroke Prediction')

# Sidebar for user input features
st.sidebar.header("Enter Input Features")

# Input fields
gender = st.sidebar.selectbox("Gender (0: Female, 1: Male)", [0, 1])
age = st.sidebar.number_input("Age (in years)", min_value=0.08, max_value=82.0, value=25.0, step=0.1)
hypertension = st.sidebar.selectbox("Hypertension (0: No, 1: Yes)", [0, 1])
heart_disease = st.sidebar.selectbox("Heart Disease (0: No, 1: Yes)", [0, 1])
ever_married = st.sidebar.selectbox("Ever Married (0: No, 1: Yes)", [0, 1])
work_type = st.sidebar.selectbox("Work Type (0: Children, 1: Govt Job, 2: Never Worked, 3: Private, 4: Self-employed)", [0, 1, 2, 3, 4])
residence_type = st.sidebar.selectbox("Residence Type (0: Rural, 1: Urban)", [0, 1])
avg_glucose_level = st.sidebar.number_input("Average Glucose Level (in mg/dL)", min_value=55.12, max_value=168.15, value=100.0, step=0.1)
bmi = st.sidebar.number_input("BMI (Body Mass Index)", min_value=10.3, max_value=97.6, value=25.0, step=0.1)
smoking_status = st.sidebar.selectbox("Smoking Status (0: Never Smoked, 1: Formerly Smoked, 2: Smokes, 3: Unknown)", [0, 1, 2, 3])

# Create user_inputs dictionary outside the button block
user_inputs = {
    'gender': gender,
    'age': age,
    'hypertension': hypertension,
    'heart_disease': heart_disease,
    'ever_married': ever_married,
    'work_type': work_type,
    'Residence_type': residence_type,
    'avg_glucose_level': avg_glucose_level,
    'bmi': bmi,
    'smoking_status': smoking_status
}

# Predict stroke status
if st.button('Predict Stroke Status'):
    input_data = pd.DataFrame([user_inputs])  # Wrap user inputs into a DataFrame
    
    # Predict stroke status
    prediction = model.predict(input_data)[0]
    probabilities = model.predict_proba(input_data)[0]
    
    # Display prediction results
    if prediction == 1:
        st.error(f"This individual is at risk of stroke! ⚠️")
    else:
        st.success(f"This individual is not at risk of stroke! ✅")
    
    st.write(f"Probability of No Stroke: {probabilities[0]:.2f}")
    st.write(f"Probability of Stroke: {probabilities[1]:.2f}")

# Show graphs section
st.header("Show Graphs")

show_graphs = st.checkbox('Show Graphs')

if show_graphs:
    st.header('Graphs')
    features = pd.DataFrame([user_inputs])  # Create features dataframe
    # Rename columns to match model feature names
    features.rename(columns=feature_name_mapping, inplace=True)
    # Plot feature importance
    st.subheader('Feature Importance')
    plot_feature_importance(model, features)
    # Plot probability chart
    st.subheader('Probability Chart')
    _, probability = predict_stroke(features)
    plot_probability_chart(probability)


